pivot_longer(!sim, names_to = c('rd', 'rd_slot'), names_sep = '_', values_to = 'team_slot') %>%
mutate(
rd = as.numeric(rd),
rd_slot = as.numeric(rd_slot)
) %>%
arrange(sim, -rd, rd_slot)
}
read.csv('bc picks.csv') %>%
create_brackets(1, .)
read.csv('bc picks.csv') %>%
create_brackets(1, .)
read.csv('bc picks.csv') %>%
create_brackets(., 1)
read_csv('bc picks.csv') %>% create_brackets(., 1)
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1)
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
run_sim_bc_my_picks <- function(group_size, sample_groups, espn_picks, pred_df, my_picks) {
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
my_sample <- data.frame(sim = (group_size * sample_groups) + 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(
group = 1:sample_groups,
is_me = 1
)
true_sample <- create_brackets(pred_df, sample_groups) %>%
select(group = sim, rd, rd_slot, actual_team_slot = team_slot)
scoring_df <- bind_rows(espn_sample, my_sample) %>%
left_join(true_sample, by = c("rd", "rd_slot", "group")) %>%
left_join(pred_df %>% select(team_slot, team_seed), by = "team_slot") %>%
mutate(pts = ifelse(team_slot == actual_team_slot, (rd-1) * team_seed, 0))
#mutate(pts = ifelse(team_slot == actual_team_slot, (2^(rd-2)) * 10, 0))
winners <- scoring_df %>%
group_by(group, sim, is_me) %>%
summarise(tot = sum(pts), .groups = 'drop') %>%
arrange(-tot) %>%
group_by(group) %>%
mutate(winner = ifelse(row_number() == 1, 1, 0)) %>%
group_by(is_me) %>%
summarise(win_pct = mean(winner)) %>%
return
}
run_sim_bc_my_picks(30, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(30, 1, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks <- function(group_size, sample_groups, espn_picks, pred_df, my_picks) {
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
my_sample <- data.frame(sim = (group_size * sample_groups) + 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(
group = 1:sample_groups,
is_me = 1
)
true_sample <- create_brackets(pred_df, sample_groups) %>%
select(group = sim, rd, rd_slot, actual_team_slot = team_slot)
scoring_df <- bind_rows(espn_sample, my_sample) %>%
left_join(true_sample, by = c("rd", "rd_slot", "group")) %>%
left_join(pred_df %>% select(team_slot, team_seed), by = "team_slot") %>%
mutate(pts = ifelse(team_slot == actual_team_slot, (rd-1) * team_seed, 0))
#mutate(pts = ifelse(team_slot == actual_team_slot, (2^(rd-2)) * 10, 0))
scoring_df %>%
group_by(group, sim, is_me) %>%
summarise(tot = sum(pts), .groups = 'drop') %>%
arrange(-tot) %>%
group_by(group) %>%
mutate(winner = ifelse(row_number() == 1, 1, 0)) %>%
group_by(is_me) %>%
summarise(win_pct = mean(winner)) %>%
return
}
run_sim_bc_my_picks(30, 1, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks <- function(group_size, sample_groups, espn_picks, pred_df, my_picks) {
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
my_sample <- data.frame(sim = (group_size * sample_groups) + 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(
group = 1:sample_groups,
is_me = 1
)
true_sample <- create_brackets(pred_df, sample_groups) %>%
select(group = sim, rd, rd_slot, actual_team_slot = team_slot)
scoring_df <- bind_rows(espn_sample, my_sample) %>%
left_join(true_sample, by = c("rd", "rd_slot", "group")) %>%
left_join(pred_df %>% select(team_slot, team_seed), by = "team_slot") %>%
mutate(pts = ifelse(team_slot == actual_team_slot, (rd-1) * team_seed, 0))
#mutate(pts = ifelse(team_slot == actual_team_slot, (2^(rd-2)) * 10, 0))
scoring_df %>%
group_by(group, sim, is_me) %>%
summarise(tot = sum(pts), .groups = 'drop') %>%
arrange(-tot) %>%
group_by(group) %>%
mutate(winner = ifelse(row_number() == 1, 1, 0)) %>%
group_by(is_me) %>%
summarise(win_pct = sum(winner)) %>%
return
}
run_sim_bc_my_picks(30, 1, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(30, 2, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks <- function(group_size, sample_groups, espn_picks, pred_df, my_picks) {
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
my_sample <- data.frame(group = 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(
sim = (group_size * sample_groups) + 1:sample_groups,
is_me = 1
)
true_sample <- create_brackets(pred_df, sample_groups) %>%
select(group = sim, rd, rd_slot, actual_team_slot = team_slot)
scoring_df <- bind_rows(espn_sample, my_sample) %>%
left_join(true_sample, by = c("rd", "rd_slot", "group")) %>%
left_join(pred_df %>% select(team_slot, team_seed), by = "team_slot") %>%
mutate(pts = ifelse(team_slot == actual_team_slot, (rd-1) * team_seed, 0))
#mutate(pts = ifelse(team_slot == actual_team_slot, (2^(rd-2)) * 10, 0))
scoring_df %>%
group_by(group, sim, is_me) %>%
summarise(tot = sum(pts), .groups = 'drop') %>%
arrange(-tot) %>%
group_by(group) %>%
mutate(winner = ifelse(row_number() == 1, 1, 0)) %>%
group_by(is_me) %>%
summarise(win_pct = sum(winner)) %>%
return
}
run_sim_bc_my_picks(30, 2, espn_picks, pred_df, bc_picks)
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
sample_groups = 2
group_size = 30
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
my_sample <- data.frame(group = 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(
sim = (group_size * sample_groups) + 1:sample_groups,
is_me = 1
)
data.frame(group = 1:sample_groups)
data.frame(group = 1:sample_groups) %>%
full_join(my_picks, by = character())
data.frame(group = 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(
sim = (group_size * sample_groups) + 1:sample_groups,
is_me = 1
)
bc_picks
bc_picks
group_size
sample_groups
(group_size * sample_groups) + 1:sample_groups
my_sample <- data.frame(group = 1:sample_groups, sim = (group_size * sample_groups) + 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(is_me = 1)
my_sample
run_sim_bc_my_picks <- function(group_size, sample_groups, espn_picks, pred_df, my_picks) {
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
my_sample <- data.frame(group = 1:sample_groups, sim = (group_size * sample_groups) + 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(is_me = 1)
true_sample <- create_brackets(pred_df, sample_groups) %>%
select(group = sim, rd, rd_slot, actual_team_slot = team_slot)
scoring_df <- bind_rows(espn_sample, my_sample) %>%
left_join(true_sample, by = c("rd", "rd_slot", "group")) %>%
left_join(pred_df %>% select(team_slot, team_seed), by = "team_slot") %>%
mutate(pts = ifelse(team_slot == actual_team_slot, (rd-1) * team_seed, 0))
#mutate(pts = ifelse(team_slot == actual_team_slot, (2^(rd-2)) * 10, 0))
scoring_df %>%
group_by(group, sim, is_me) %>%
summarise(tot = sum(pts), .groups = 'drop') %>%
arrange(-tot) %>%
group_by(group) %>%
mutate(winner = ifelse(row_number() == 1, 1, 0)) %>%
group_by(is_me) %>%
summarise(win_pct = sum(winner)) %>%
return
}
run_sim_bc_my_picks(30, 2, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks <- function(group_size, sample_groups, espn_picks, pred_df, my_picks) {
espn_sample <- create_brackets(espn_picks, group_size * sample_groups) %>%
mutate(
group = floor((sim - 0.01) / group_size) + 1,
is_me = 0
)
my_sample <- data.frame(group = 1:sample_groups, sim = (group_size * sample_groups) + 1:sample_groups) %>%
full_join(my_picks, by = character()) %>%
mutate(is_me = 1)
true_sample <- create_brackets(pred_df, sample_groups) %>%
select(group = sim, rd, rd_slot, actual_team_slot = team_slot)
scoring_df <- bind_rows(espn_sample, my_sample) %>%
left_join(true_sample, by = c("rd", "rd_slot", "group")) %>%
left_join(pred_df %>% select(team_slot, team_seed), by = "team_slot") %>%
mutate(pts = ifelse(team_slot == actual_team_slot, (rd-1) * team_seed, 0))
#mutate(pts = ifelse(team_slot == actual_team_slot, (2^(rd-2)) * 10, 0))
scoring_df %>%
group_by(group, sim, is_me) %>%
summarise(tot = sum(pts), .groups = 'drop') %>%
arrange(-tot) %>%
group_by(group) %>%
mutate(winner = ifelse(row_number() == 1, 1, 0)) %>%
group_by(is_me) %>%
summarise(win_pct = sum(winner) / sample_groups) %>%
return
}
run_sim_bc_my_picks(30, 1000, espn_picks, pred_df, bc_picks)
read_csv('bc picks.csv') %>% summarise_all()
read_csv('bc picks.csv') %>% select(contains('rd')) %>%  summarise_all(sum)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
run_sim_bc_my_picks(30, 1000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(30, 1000, espn_picks, pred_df, bc_picks)
.074 * 1000
sample(c(0,1), size = 10, replace = T, prob = c(0.074,1-0.074))
sapply(1:10, function(x) mean(sample(c(0,1), size = 10, replace = T, prob = c(0.074,1-0.074))))
sapply(1:10, function(x) mean(sample(c(0,1), size = 1000, replace = T, prob = c(0.074,1-0.074))))
sapply(1:1000, function(x) mean(sample(c(0,1), size = 1000, replace = T, prob = c(0.074,1-0.074))))
sampling <- sapply(1:1000, function(x) mean(sample(c(1,0), size = 1000, replace = T, prob = c(0.074,1-0.074))))
sapply(1:1000, function(x) mean(sample(c(1,0), size = 1000, replace = T, prob = c(0.074,1-0.074)))) %>% summary
sapply(1:1000, function(x) mean(sample(c(1,0), size = 1000, replace = T, prob = c(0.074,1-0.074)))) %>% sd
sapply(1:1000, function(x) mean(sample(c(1,0), size = 3000, replace = T, prob = c(0.074,1-0.074)))) %>% sd
sapply(1:1000, function(x) mean(sample(c(1,0), size = 3000, replace = T, prob = c(0.074,1-0.074)))) %>% sd
sapply(1:1000, function(x) mean(sample(c(1,0), size = 3000, replace = T, prob = c(0.074,1-0.074)))) %>% sd
run_sim_bc_my_picks(30, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(30, 3000, espn_picks, pred_df, bc_picks)
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
filter(team_region == 'South' & rd < 6) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
#filter(team_region == 'South' & rd < 6) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
filter(team_region == 'South' & rd < 6) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
filter(team_region == 'West' & rd < 6) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
filter(team_region == 'East' & rd < 6) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
filter(team_region == 'Midwest' & rd < 6) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
#filter(team_region == 'Midwest' & rd > 5) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
run_sim_bc_my_picks(30, 3000, espn_picks, pred_df, bc_picks)
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
sapply(1:1000, function(x) mean(sample(c(1,0), size = 3000, replace = T, prob = c(0.15,1-0.15)))) %>% sd
multi_sim <- lapply(1:7, function(x) run_sim_bc(30, 3000, espn_picks, pred_df)) %>%
bind_rows %>%
mutate(pick_rank = NULL) %>%
group_by(rd, rd_slot, team_slot) %>%
summarise_all(sum) %>%
arrange(-(wins/picked)) %>%
mutate(pick_rank = row_number()) %>%
ungroup
pred_df %>%
select(team_slot, team_region, team_seed, team_name) %>%
right_join(multi_sim) %>%
mutate(
win_pct = wins/picked,
pick_desc = paste0(team_seed, ')', team_name, ' - ', percent(win_pct, accuracy = 0.1)),
pick_name = paste0(rd, '_', rd_slot)
) %>%
filter(pick_rank <= 5) %>%
#filter(team_region == 'Midwest' & rd > 5) %>%
arrange(-rd, rd_slot) %>%
pivot_wider(pick_rank, names_from = pick_name, values_from = pick_desc) %>%
arrange(pick_rank) %>%
view
4 * 6 * .19
4 * 9 * .11
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
bc_picks <- read_csv('bc picks.csv') %>% create_brackets(., 1) %>% mutate(sim = NULL)
read_csv('bc picks.csv') %>% select(contains('rd')) %>% summarise_all(sum)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
run_sim_bc_my_picks(29, 3000, espn_picks, pred_df, bc_picks)
sapply(1:1000, function(x) mean(sample(c(1,0), size = 10000, replace = T, prob = c(0.15,1-0.15)))) %>% sd
run_sim_bc_my_picks(29, 10000, espn_picks, pred_df, bc_picks)
library(tidyverse)
library(scales)
library(jsonlite)
library(htmlTable)
source('create brackets.R')
espn_picks <- readRDS('espn_picks.rds')
submitted <- create_brackets(espn_picks, 22) %>% mutate(name = paste0('p',sim), sim = NULL, pool = c(rep('UPay', 63*9),rep('Otterbein', 63*10),rep('Reinhard', 63*3)))
#submitted <- readRDS('all-subs.rds')
sys_time <- Sys.time()
current_json <- fromJSON('https://projects.fivethirtyeight.com/march-madness-api/2021/madness.json')
write_json(current_json, paste0('C:/Users/Owner/Documents/madness-21-saves/538/', gsub(':','_',sys_time), '.json'))
upd_time <- format(sys_time, '%F @ %r')
current_run <- current_json$forecasts$mens$current_run$teams %>%
mutate(
team_slot = team_slot - team_slot %% 2,
rd1_win = NULL
)
max_score <- current_run %>%
filter(team_alive == 1) %>%
select(team_slot) %>%
distinct %>%
inner_join(submitted, by = c("team_slot")) %>%
mutate(pts = (2^(rd-2)) * 10) %>%
group_by(pool, name) %>%
summarise(max_pts = sum(pts), .groups = 'drop')
curr_score <- current_run %>%
select(team_slot, contains('rd')) %>%
pivot_longer(contains('rd'), names_to = c('rd',NA), values_to = 'prob', names_prefix = 'rd', names_sep = '_') %>%
mutate(rd = as.numeric(rd)) %>%
filter(prob == 1) %>%
inner_join(submitted, by = c("team_slot", "rd")) %>%
mutate(pts = (2^(rd-2)) * 10) %>%
group_by(pool, name) %>%
summarise(curr_pts = sum(pts), .groups = 'drop')
sim_results <- current_run %>%
create_brackets(200) %>%
left_join(submitted, by = c('rd', 'rd_slot'), suffix = c('_actual', '_pick')) %>%
mutate(pts = ifelse(team_slot_pick == team_slot_actual, (2^(rd-2)) * 10, 0)) %>%
group_by(sim, pool, name) %>%
summarise(tot = sum(pts) + (runif(1) / 100), .groups = 'drop') %>%
arrange(-tot) %>%
group_by(sim, pool) %>%
mutate(
rank = row_number(),
in_pool = max(rank),
tot = floor(tot)
) %>%
ungroup
standings_df <- sim_results %>%
group_by(pool, name) %>%
summarise(
win_prob = mean(ifelse(rank == 1, 1, 0)),
top3_prob = mean(ifelse(rank <= 3, 1, 0)),
last_prob = mean(ifelse(rank == in_pool, 1, 0)),
avg = mean(tot),
.groups = 'drop'
) %>%
left_join(curr_score, by = c("pool", "name")) %>%
left_join(max_score, by = c("pool", "name")) %>%
mutate(
curr_pts = ifelse(is.na(curr_pts), 0, curr_pts),
time = sys_time
)
saveRDS(standings_df, paste0('C:/Users/Owner/Documents/madness-21-saves/standings/', gsub(':','_',sys_time), '.rds'))
complete_res <- standings_df %>%
mutate(
`Win %` = case_when(
win_prob == 0 ~ 'OUT',
win_prob < 0.0005 ~ '<0.1%',
T ~ percent(win_prob, accuracy = 0.1)
),
`Last %` = case_when(
last_prob == 0 ~ 'SAFE',
last_prob < 0.0005 ~ '<0.1%',
T ~ percent(last_prob, accuracy = 0.1)
),
`Avg Pts` = number(avg, accuracy = 0.1)
) %>%
arrange(-win_prob) %>%
select(pool, name, `Win %`, `Last %`, `Avg Pts`, curr_pts, max_pts) %>%
rename(`Curr` = curr_pts, `Max` = max_pts, Name = name)
html_header <- function(grp) {
paste0('<head include-html="/header.html">
<title>March Madness - ',grp,'</title>
<script src="/include.js?v=2"></script>
<script src="https://sdk.amazonaws.com/js/aws-sdk-2.7.16.min.js"></script>
<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap" rel="stylesheet">
</head>
<body>')
}
gen_page <- function(df, grp) {
df %>%
filter(pool == grp) %>%
mutate(pool = NULL) %>%
addHtmlTableStyle(
align = "c",
align.header = "c",
css.cell = "padding-left: 1em; padding-right: 1em; font-family: Roboto, sans-serif;",
col.rgroup = c("none", "#F7F7F7"),
css.header = "font-weight: bold;"
) %>%
htmlTable(rnames = F) %>%
gsub('<table', '<table onclick="sortColumn(event)"', .) %>%
paste0(html_header(grp), ., '\n\nLast Updated: ',upd_time, '</body>') %>%
write.table(paste0(grp,'.html'), row.names = F, col.names = F, quote = F)
}
gen_page(complete_res, 'UPay')
gen_page(complete_res, 'Otterbein')
gen_page(complete_res, 'Reinhard')
closeAllConnections()
rm(list = ls())
